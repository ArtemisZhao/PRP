t<-round(integrate(rprob, 0, Inf,abs.tol = 0)$value,3)
t
c= sqrt(2/pi)
r=6e-3
rprob<-function(t){
pnorm(sqrt((1-r)/r*t)) * exp(-t^2/2)
}
t<-round(integrate(rprob, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,2)
c*t
t
t<-round(integrate(rprob, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,3)
t
t<-round(integrate(rprob, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
t
t=c*t
t
t^2+(1-t)^2
c= sqrt(2/pi)
r=6e-3
rprob<-function(t){
pnorm(sqrt((1-r)/r*t)) * exp(-t^2/2)
}
t<-round(integrate(rprob, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
c*t
c*t*c*t+(1-c*t)*(1-c*t)
c= sqrt(2/pi)
#r=6e-3
rprob<-function(t){
pnorm(sqrt((1-r)/r*t)) * exp(-t^2/2)
}
target<-function(r){
t<-round(integrate(rprob, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target-0.99,c(0,1))$root
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(Vectorize(target),c(0,1))$root
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,1))$root
c= sqrt(2/pi)
#r=6e-3
rprob<-function(t){
pnorm(sqrt((1-r)/r*t)) * exp(-t^2/2)
}
target<-function(r){
t<-round(integrate(rprob, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-0.99)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,1))$root
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(-1,1))$root
c= sqrt(2/pi)
#r=6e-3
rprob<-function(t){
pnorm(sqrt((1-r)/r*t)) * exp(-t^2/2)
}
target<-function(r){
t<-round(integrate(rprob, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-0.999)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(-1,1))$root
c= sqrt(2/pi)
#r=6e-3
rprob<-function(t){
pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)
}
target<-function(r){
t<-round(integrate(rprob, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-0.999)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(-1,1))$root
t<-round(integrate(rprob, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
t
res=(c*t)^2+(1-c*t)^2
res
target<-function(r){
t<-round(integrate(function(t){pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-0.999)
}
target(6e-3)
target<-function(r){
t<-round(integrate(function(t){pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res)
}
target(6e-3)
target(1e-5)
target(0)
target(0.024)
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1))$root
target<-function(r){
c= sqrt(2/pi)
t<-round(integrate(function(t){pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-0.99)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1))$root
root
target<-function(r){
c= sqrt(2/pi)
t<-round(integrate(function(t){pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-0.9999)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1))$root
root
target<-function(r){
c= sqrt(2/pi)
t<-round(integrate(function(t){pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-0.997)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1))$root
root
target<-function(r){
c= sqrt(2/pi)
t<-round(integrate(function(t){pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-0.995)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1))$root
root
target<-function(r){
c= sqrt(2/pi)
t<-round(integrate(function(t){pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-0.975)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1))$root
root
target<-function(r){
c= sqrt(2/pi)
t<-round(integrate(function(t){pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-0.95)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1))$root
root
target<-function(r){
c= sqrt(2/pi)
t<-round(integrate(function(t){pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-0.9)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1))$root
root
prob_to_r<-function(x){
target<-function(r){
c<- sqrt(2/pi)
t<-round(integrate(function(t){pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-x)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1))$root
}
prob=c(0.99,0.975,0.95,0.90)
sappply(prob, function(x) prob_to_r(x))
sapply(prob, function(x) prob_to_r(x))
?uniroot
prob_to_r<-function(x){
target<-function(r){
c<- sqrt(2/pi)
t<-round(integrate(function(t){
pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)
}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-x)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1),tol = .Machine$double.eps^0.01)$root
}
prob=c(0.99,0.975,0.95,0.90)
sapply(prob, function(x) prob_to_r(x))
prob_to_r<-function(x){
target<-function(r){
c<- sqrt(2/pi)
t<-round(integrate(function(t){
pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)
}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-x)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1),tol = .Machine$double.eps^0.1)$root
}
prob=c(0.99,0.975,0.95,0.90)
sapply(prob, function(x) prob_to_r(x))
prob_to_r<-function(x){
target<-function(r){
c<- sqrt(2/pi)
t<-round(integrate(function(t){
pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)
}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-x)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1),tol = .Machine$double.eps^0.2)$root
}
prob=c(0.99,0.975,0.95,0.90)
sapply(prob, function(x) prob_to_r(x))
x=runif(100)
y=runif(100)
1/2*(x+y)
plot(1/2*(x+y))
hist(1/2*(x+y))
hist(x)
hist(y)
y=runif(1000)
hist(y)
x-runif(1000)
x=runif(1000)
hist(x)
hist(1/2*(x+y))
prob_to_r<-function(x){
target<-function(r){
c<- sqrt(2/pi)
t<-round(integrate(function(t){
pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)
}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-x)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1),tol = .Machine$double.eps^0.2)$root
}
prob=c(0.999,0.975,0.95,0.90)
sapply(prob, function(x) prob_to_r(x))
prob_to_r(0.96)
prob_to_r<-function(x){
target<-function(r){
c<- sqrt(2/pi)
t<-round(integrate(function(t){
pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)
}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=(c*t)^2+(1-c*t)^2
return(res-x)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1),tol = .Machine$double.eps^0.2)$root
return(root)
}
prob_to_r(0.96)
prob_to_r(0.96)^2
prob_to_r(0.95)
6e-3
prob_to_r(0.975)
prob_to_r<-function(x){
target<-function(r){
c<- sqrt(2/pi)
t<-round(integrate(function(t){
pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)
}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=c*t
return(res-x)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1),tol = .Machine$double.eps^0.2)$root
return(root)
}
prob=c(0.999,0.975,0.95,0.90)
sapply(prob, function(x) prob_to_r(x))
prob=c(1,0.999,0.975,0.95)
sapply(prob, function(x) prob_to_r(x))
hist(0.9*x+0.1*y)
z=runif(1000)
hist(0.8*x+0.1*y+0.1*z)
hist(0.5*x+0.2*y+0.3*z)
hist(0.34*x+0.33*y+0.33*z)
hist(0.8*x+0.1*y+0.1*z)
hist(0.1*x*8+0.1*y+0.1*z)
devtools::use_data_raw()
use_data_raw()
devtools:use_data_raw()
library(devtools)
devtools::use_data_raw()
setwd("~/Desktop/rep_new/PRP/data-raw")
cardi_severe<-read.table("cardiovascular_severe.dat",header=T)
View(cardi_severe)
class(cardi_severe[.3])
class(cardi_severe[,3])
setwd("~/Desktop/rep_new/PRP")
devtools::load_all()
devtools::document
devtools::document()
devtools::use_data(cardi_severe)
source()
setwd("~/Desktop/rep_new/PRP/R")
setwd("~/Desktop/rep_new/PRP")
devtools::document()
setwd("~/Desktop/rep_new/PRP/data-raw")
cardi_severe<-read.table("cardiovascular_severe.dat",header=T)
cardi_mortality<-read.table("cardiovascular.dat",header=T)
rpp<-read.table("rpp_73.dat",header = T)
usethis::use_data(cardi_severe,overwrite = T)
usethis::use_data(cardi_mortality,overwrite = T)
usethis::use_data(rpp,overwrite = T)
devtools::document()
devtools::load_all()
data(rpp)
data("cardi_mortality")
data("cardi_severe")
View(cardi_mortality)
View(cardi_severe)
View(rpp)
devtools::document()
devtools::load_all()
prob_to_r(0.95)
prob_to_r(0.90)
prob_to_r(0.975)
prob_to_r(0.999)
prob_to_r(0.99)
prob_to_r<-function(p){
target<-function(r){
c<- sqrt(2/pi)
t<-round(integrate(function(t){
pnorm(sqrt((1-r)/r)*t) * exp(-t^2/2)
}, 0, Inf,abs.tol = .Machine$double.eps^0.1)$value,4)
res=c*t
return(res-p)
}
#mixture_CDF_left<-Vectorize(function(t) wts%*%pnorm(t,mean=mean,sd=sqrt(var))-0.025)
root<-uniroot(target,c(0,0.1),tol = .Machine$double.eps^0.2)$root
return(root)
}
prob_to_r(0.99)
1e-5
1e-5==0.00001
prob_to_r(0.999)
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
library(PRP)
remove.packages("PRP")
#' \item{test_statistics}{ The test statistics used in calculating the replication p-value.}
#' \item{n_sim}{ The L value.}
#' \item{test_stats_dif}{ The difference between the simulated test statistics
#' quantity and the original value.}
#' \item{pvalue}{ The resulting posterior predictive replicaiton p-value.}
#'
#' @importFrom mvtnorm dmvnorm
#'
#' @export
#'
posterior_prp<-function(beta,se,L=1000,r_vec = c(0,8e-4, 6e-3, 0.024),test,print_test_dist=FALSE){
res<-list()
sd2=se^2
m<-length(beta)  ###number of replicates
#chis1<-qchisq(c(0.25,0.5,0.75),df=1)
## test1 normal
#eta2_vec = c(mean(beta),min(beta),max(beta))^2
## test 2 weighted average
wts = 1/sd2
center = sum(wts*beta)/sum(wts)
eta2_vec = c(center, center-sqrt(1/sum(wts)),center+sqrt(1/sum(wts)))^2
## test 3
#eta2_vec = c(center)^2
#res[["eta_grid"]] = eta2_vec
rv = r_vec
make_grid <-function(eta2){
grid = sapply(rv, function(x)  c(eta2*(1-x), eta2*x))
return(t(grid))
}
grid = c()
for (i in 1:length(eta2_vec)){
grid = rbind(grid, make_grid(eta2_vec[i]))
}
res[["grid"]]= grid
omg2_list = grid[,1]
phi2_list = grid[,2]
wts<-c()
count=0
for (i in 1:length(omg2_list)){
omg2<-omg2_list[i]
phi2<-phi2_list[i]
Sigma<-matrix(omg2,ncol=m,nrow=m)+diag(c(sd2+phi2),nrow=m)
wtsi<-dmvnorm(beta, mean=rep(0,m), sigma=Sigma)
wts<-c(wts,wtsi)
}
wts<-wts/sum(wts)
dist_list<-c()
dist_list2<-c()
for (t in 1:L){
k<-sample(1:length(omg2_list),1,prob=wts)
phi2<-phi2_list[k]
omg2<-omg2_list[k]
barbeta_pos_var<-1/(1/omg2+sum(1/(sd2+phi2)))
barbeta_pos_mean<-barbeta_pos_var*sum(beta/(sd2+phi2))
barbeta<-rnorm(1,barbeta_pos_mean,sqrt(barbeta_pos_var))
betanewjs<-c()
for (j in 1:m){
#print(c(i,j))
if (phi2==0){
betaj=barbeta
}
else{
betaj_var<-1/(1/phi2+1/sd2[j])
betaj_mean<-betaj_var*(barbeta/phi2+beta[j]/sd2[j])
betaj<-rnorm(1,betaj_mean,sqrt(betaj_var))
#print(betaj)
}
betanewj = betaj+rnorm(1,0,sqrt(sd2[j]))
betanewjs<-c(betanewjs,betanewj)
}
test_sim<-test(betanewjs,sd2,phi2,m)
test_orig<-test(beta,sd2,phi2,m)
dist_list = c(dist_list, test_sim)
dist_list2= c(dist_list2, (test_sim - test_orig))
count = count + ( test_sim > test_orig )
}
if (print_test_dist){
#print(length(dist_list))
hist(dist_list2)
}
res[["test_statistics"]]=test
res[["n_sim"]]=L
###
res[["test_stats_dif"]]=dist_list2
###
res[["pvalue"]]=count/L
return( res)
}
egger <- function(beta,se2,phi2,m){
y = beta/sqrt(se2+phi2)
x = 1/sqrt(se2+phi2)
Sxx = sum( (x-mean(x))*x)
Sxy = sum( (x-mean(x))*y)
Syy = sum( (y-mean(y))*y)
b1 = Sxy/Sxx
b0 = mean(y)- b1*mean(x)
s2 = (Syy - b1^2*Sxx)/m
vb0 = s2*(1/m+mean(x)^2/Sxx)
egger_test = b0^2/vb0
return(egger_test)
}
Q<-function(beta,se2,phi2,m){
q_test = sum((beta - mean(beta))^2 / (se2 + phi2))
return(q_test)
}
posterior_prp(beta=c(1,3),se=c(1,1),test=egger)
library(mvtnorm)
posterior_prp(beta=c(1,3),se=c(1,1),test=egger)
test=egger
test
egger(c(1,3),c(1,1),3,10)
beta=c(1,3)
phi2=3
se2<-c(1,1)
m=2
y = beta/sqrt(se2+phi2)
x = 1/sqrt(se2+phi2)
Sxx = sum( (x-mean(x))*x)
Sxy = sum( (x-mean(x))*y)
Syy = sum( (y-mean(y))*y)
b1 = Sxy/Sxx
b0 = mean(y)- b1*mean(x)
s2 = (Syy - b1^2*Sxx)/m
vb0 = s2*(1/m+mean(x)^2/Sxx)
egger_test = b0^2/vb0
egger_test
vb0
x
y
Sxx
Syy
Sxy
b1
x
posterior_prp(beta=c(1,3),se=c(1,0.5),test=egger)
posterior_prp(beta=c(1,3),se=c(1,0.5),test=Q)
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
library(PRP)
devtools::document()
library(PRP)
remove.packages("PRP")
devtools::load_all()
Q()
devtools::document()
devtools::load_all()
library(PRP)
remove.packages("PRP")
devtools::load_all()
?posterior_prp
?Q
Q(c(1,2),c(1,0.5))
Q(c(1,2),c(1,0.5),3,2)
devtools::document()
devtools::load_all()
